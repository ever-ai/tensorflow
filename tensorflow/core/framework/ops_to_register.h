// This file was autogenerated by print_selective_registration_header.py
#ifndef OPS_TO_REGISTER
#define OPS_TO_REGISTER

    namespace {
      constexpr const char* skip(const char* x) {
        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;
      }

      constexpr bool isequal(const char* x, const char* y) {
        return (*skip(x) && *skip(y))
                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))
                   : (!*skip(x) && !*skip(y));
      }

      template<int N>
      struct find_in {
        static constexpr bool f(const char* x, const char* const y[N]) {
          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);
        }
      };

      template<>
      struct find_in<0> {
        static constexpr bool f(const char* x, const char* const y[]) {
          return false;
        }
      };
    }  // end namespace
    constexpr const char* kNecessaryOpKernelClasses[] = {
"BinaryOp< CPUDevice, functor::add<float>>",
"AvgPoolingOp<CPUDevice, float>",
"ConcatV2Op<CPUDevice, float>",
"ConstantOp",
"Conv2DUsingGemmOp< float, Im2ColConvFunctor<float, float, float, FastGemmFunctor<float, float, float>>>",
"IdentityOp",
"MatMulOp<CPUDevice, float, false >",
"MaxPoolingOp<CPUDevice, float>",
"BinaryOp< CPUDevice, functor::maximum<float>>",
"ReductionOp<CPUDevice, float, Eigen::internal::MeanReducer<float>>",
"MergeOp",
"BinaryOp< CPUDevice, functor::mul<float>>",
"NoOp",
"PlaceholderOp",
"ReluOp<CPUDevice, float>",
"ReshapeOp",
"UnaryOp< CPUDevice, functor::rsqrt<float>>",
"UnaryOp< CPUDevice, functor::square<float>>",
"BinaryOp< CPUDevice, functor::squared_difference<float>>",
"SqueezeOp",
"IdentityOp",
"BinaryOp< CPUDevice, functor::sub<float>>",
"ReductionOp<CPUDevice, float, Eigen::internal::SumReducer<float>>",
"SwitchOp",
"RecvOp",
"SendOp",
};
#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))

constexpr inline bool ShouldRegisterOp(const char op[]) {
  return false
     || isequal(op, "Add")
     || isequal(op, "AvgPool")
     || isequal(op, "ConcatV2")
     || isequal(op, "Const")
     || isequal(op, "Conv2D")
     || isequal(op, "Identity")
     || isequal(op, "MatMul")
     || isequal(op, "MaxPool")
     || isequal(op, "Maximum")
     || isequal(op, "Mean")
     || isequal(op, "Merge")
     || isequal(op, "Mul")
     || isequal(op, "NoOp")
     || isequal(op, "Placeholder")
     || isequal(op, "Relu")
     || isequal(op, "Reshape")
     || isequal(op, "Rsqrt")
     || isequal(op, "Square")
     || isequal(op, "SquaredDifference")
     || isequal(op, "Squeeze")
     || isequal(op, "StopGradient")
     || isequal(op, "Sub")
     || isequal(op, "Sum")
     || isequal(op, "Switch")
     || isequal(op, "_Recv")
     || isequal(op, "_Send")
  ;
}
#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)

#define SHOULD_REGISTER_OP_GRADIENT false
#endif
